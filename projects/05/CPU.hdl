// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //i xx a cccccc ddd jjj
    //i= A or C instruction
    //if c, a & c bits are comp part, d bits are destination, j is jump
    //if a, the 15 bits are a constant
    Or(a=instruction[15], b=false, out=cInstruction); //Found out if it is a C instruction
    Not(in=cInstruction, out=aInstruction); //Find out if it is an A instruction
    And(a=cInstruction, b=instruction[5], out=cWriteToA); //Write to A if C instruction and destination is A
    Or(a=aInstruction, b=cWriteToA, out=loadA); //Load A if an A instruction or C instruction writing to A

    Mux16(a=instruction, b=aluOutput, sel=cWriteToA, out=aRegisterInput);
    
    ARegister(in=aRegisterInput, load=loadA, out=aOutput, out[0..14]=addressM); //Load to the A register. Output the M address as well

    And(a=cInstruction, b=instruction[4], out=loadD); //If destination is D and C instruction
    DRegister(in=aluOutput, load=loadD, out=dOutput);

    Mux16(a=aOutput, b=inM, sel=instruction[12], out=outMOrA);

    ALU(
    x=dOutput, //D register output
    y=outMOrA, //
    zx=instruction[11], //c1
    nx=instruction[10], //c2
    zy=instruction[9], //c3
    ny=instruction[8], //c4
    f=instruction[7], //c5
    no=instruction[6], //c6
    out=aluOutput,
    out=outM,
    zr=isZero,
    ng=isNeg
    );

    Not(in=isNeg, out=isPos);
    Not(in=isZero, out=isntZero);
    And(a=isPos, b=isntZero, out=isPositive);

    And(a=instruction[3], b=cInstruction, out=writeM); //If write to m

    And(a=instruction[0], b=isPositive, out=JGT);
    And(a=instruction[1], b=isZero, out=JEQ);
    And(a=instruction[2], b=isNeg, out=JLT);

    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JLE, b=JGT, out=aJump); //Find out if to jump
    And(a=cInstruction, b=aJump, out=pcLoad); //Load pc if a cinstruction with a jump

    Not(in=pcLoad, out=inc);
    PC(in=aOutput, inc=inc, load=pcLoad, reset=reset, out[0..14]=pc);

}